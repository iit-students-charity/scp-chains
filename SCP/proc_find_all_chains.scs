scp_program -> proc_find_all_chains (*

	-> rrel_params: ... (*
		-> rrel_1: rrel_out: _graph;;
		-> rrel_2: rrel_in: _beg_vertex;;
		-> rrel_3: rrel_in: _end_vertex;;
		-> rrel_4: rrel_out: _simple_chain;;
		-> rrel_5: rrel_out: _not_checked_vertexes;;
	*);;

	-> rrel_operators: ...(*
	-> rrel_init: ..proc_find_all_chains_init (*
		=> nrel_goto: ..proc_find_all_chains_if_begin_equals_end;;	
	*);;
	//Проверка равества начальной вершины цепи и конечной
	//Если равны, то добавляем данную цепь в граф
	//Если не равны, то продолжаем поиск (переходим к оператору удаления начальной вершины из множества проверенных вершин)	
	-> ..proc_find_all_chains_if_begin_equals_end (*
		-> rrel_1: _beg_vertex;;
		-> rrel_2: _end_vertex;;
		=> nrel_then: ..proc_find_all_chains_add_chain_to_graph;;
		=> nrel_else: ..proc_find_all_chains_erase_begin_from_not_checked_vertexes;;
	*);;

	//Добавление цепи к графу отношением rrel_chain	(если начальная вершина = конечной вершине в предыдущем операторе)
	-> ..proc_find_all_chains_add_chain_to_graph (*
		<- genElStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		-> rrel_3: rrel_fixed: rrel_node: rrel_scp_var: _simple_chain;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		-> rrel_5: rrel_assign: rrel_scp_const: rrel_node: rrel_chain;;
		=> nrel_goto: ..proc_find_all_chains_erase_not_checked_vertexes;;
	*);;

	//Очищение памяти от множества _not_checked_vertexes и выход из программы
	-> ..proc_find_all_chains_erase_not_checked_vertexes (*
		<- eraseEl;;
		-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _not_checked_vertexes;;
		=> nrel_goto: ..proc_find_all_chains_return;;	
	*);;

	//Удаление начальной вершины _begin из множества непроверенных вершин
	//Поиск 3-элементоной конструкции, содержащей начальную вершину (если начальная вершина != конечной вершине)
	//В процессе поиска ищем дугу (_deleted_arc)
	-> ..proc_find_all_chains_erase_begin_from_not_checked_vertexes (*
		<- searchElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _not_checked_vertexes;;
		-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _deleted_arc;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _beg_vertex;;
		=> nrel_goto: ..proc_find_all_chains_erase_begin_vertex;;
	*);;

	//Удаление начальной вершины из множества непроверенных вершин путем удаления дуги, связывающей множество вершин и данную вершину (_deleted_arc)
	-> ..proc_find_all_chains_erase_begin_vertex (*
		<- eraseEl;;
		-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _deleted_arc;;
		=> nrel_goto: ..proc_find_all_chains_get_all_adjacent_vertices;;	
	*);;

	//Добавление всех смежных начальной вершине begin вершин во множество смежных вершин _all_adjacent_vertices
	//Если вершины будут добавлены, то переходим к следующему оператору
	//Если вершины НЕ будут добавлены, то очищаем память и выходим
	-> ..proc_find_all_chains_get_all_vertices (*
		 <- searchSetStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _beg_vertex;;
		-> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc3;;
		-> rrel_3: rrel_assign: rrel_scp_var: _adjacent_vertices;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
		-> rrel_5: rrel_fixed: rrel_scp_var: _graph;;
		->rrel_set_3: rrel_assign: rrel_scp_var: _all_adjacent_vertices;;
		=> nrel_then: ..proc_find_all_chains_get_adjacent_vertex;;		
		=> nrel_else: ..proc_find_all_chains_erase_all_adjacent_vertices;;	
	*);;
	
	//Очистка памяти путем удаления множества _all_adjacent_vertices (если в предыдущем операторе не было найдено ни одной смежной вершины)
	-> ..proc_find_all_chains_erase_all_adjacent_vertices (*
		<- eraseEl;;
		-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _all_adjacent_vertices;;
		=> nrel_goto: ..proc_find_all_chains_return;;
	*);;

	//Получение смежной вершины
	-> ..proc_find_all_chains_get_adjacent_vertex (*
		<- searchElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _all_adjacent_vertices;;
		-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: _arc5;;
		-> rrel_3: rrel_assign: rrel_scp_var: _adjacent_vertex;;
		=> nrel_then: ..proc_find_all_chains_if_vertex_not_checked;; //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		=> nrel_else: ..proc_find_all_chains_erase_all_adjacent_vertices;;
	*);;

	//Проверка на принадлежность смежной вершины множеству непроверенных вершин (проходили ли мы уже через эту вершину)
	//Если проходили, то удаляем эту вершину из списка смежных и переходим к следующей вершине (вершина не найдена во множестве _not_checked_vertexes)
	//Если не проходили, то добавляем эту вершину в _alternative_chain, которая является копией simple_chain (вершина найдена во множестве _not_checked_vertexes)
	-> ..proc_find_all_chains_if_vertex_not_checked (*
		<- searchElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _not_checked_vertexes;;
		-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: _arc_between_not_checked_vertexes_and_adjacent_vertex;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _adjacent_vertex;;
		=> nrel_then: ..proc_find_all_chains_copy_simple_chain_temp;; //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		=> nrel_else: ..proc_find_all_chains_erase_adjacent_vertex;; 
	*);;
	
	//Удаление пройденной вершины из множества смежных вершин путем удаления дуги, связывающей множество вершин и данную вершину
	//Переход к оператору получения следующей смежной вершины
	-> ..proc_find_all_chains_erase_adjacent_vertex (*
		<- eraseEl;;
		-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc_between_not_checked_vertexes_and_adjacent_vertex;;
		=> nrel_goto: ..proc_find_all_chains_get_adjacent_vertex;;	
	*);;

	//Рекурсивный вызов программы 
	-> ..proc_find_all_chains_copy_simple_chain_temp (*
		<- call;;
		-> rrel_1: rrel_fixed: rrel_scp_const: proc_find_all_chains;;
		-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
			-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _adjacent_vertex;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _end_vertex;;
			-> rrel_4: rrel_fixed: rrel_scp_var: _simple_chain;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _not_checked_vertexes;;
		*);;
		-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
		=> nrel_goto: ..proc_find_all_chains_create_arc_between_begin_and_not_checked_vertex;;
	*);;

	//Ожидание завершения рекурсивного вызова
	-> ..proc_find_all_chains_create_arc_between_begin_and_not_checked_vertex (*
		<- waitReturn;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
		=> nrel_goto: ..proc_find_all_chains_find_arc;;
	*);;
		
	//Поиск дуги, связывающей множество непроверенных вершин и вершины _begin	
	-> ..proc_find_all_chains_find_arc (*
		<- searchElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _not_checked_vertexes;;
		-> rrel_2: rrel_assign: rrel_scp_var: rrel_common: _arc_between_not_checked_vertexes_and_adjacent_vertex_rewrite_find;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _adjacent_vertex;;
		=> nrel_then: ..proc_find_all_chains_get_adjacent_vertex;; //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		=> nrel_else: ..proc_find_all_chains_create_arc;; 
	*);;

	-> ..proc_find_all_chains_create_arc (*
		<- genElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _not_checked_vertexes;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc_between_not_checked_vertexes_and_adjacent_vertex_rewrite;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _adjacent_vertex;;
		=> nrel_goto: ..proc_find_all_chains_get_adjacent_vertex;;
	*);;

	//Копирование всех вершин из _simple_chain в _alternative_chain
	//В этом операторе ищем первую вершину цепи
	/*-> ..proc_find_all_chains_copy_simple_chain (*
		 <- searchElStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _simple_chain;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc6;;
		-> rrel_3: rrel_assign: rrel_scp_var: _first_vertex_in_chain;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc7;;
		-> rrel_5: rrel_assign: rrel_scp_var: rrel_first_vertex;;
		=> nrel_goto: ..proc_find_all_chains_create_copy_chain;;
	*);;

	//Создание копии цепи (создаем узел)
	//Переход к оператору создания первой вершины
	-> ..proc_find_all_chains_create_copy_chain (*
		<- genEl;;
		-> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _copy_chain;;
		=> nrel_goto: ..proc_find_all_chains_add_first_vertex;;
	*);;

	//Оператор создания первой вершины
	-> ..proc_find_all_chains_add_first_vertex (*
		<- genElStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _copy_chain;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc8;;
		-> rrel_3: rrel_fixed: rrel_node: rrel_scp_var: _first_vertex_in_chain;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc9;;
		-> rrel_5: rrel_assign: rrel_scp_const: rrel_node: rrel_first_vertex;;
		=> nrel_goto: ..proc_find_all_chains_get_next_vertex;;
	*);;

	//Оператор поиска следующей вершины
	-> ..proc_find_all_chains_get_next_vertex_after_first_vertex (*
		<- genElStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _first_vertex_in_chain;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc8;;
		-> rrel_3: rrel_fixed: rrel_node: rrel_scp_var: _next_vertex_1;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc9;;
		-> rrel_5: rrel_assign: rrel_scp_const: rrel_node: rrel_next_vertex;;
		=> nrel_goto: ..proc_find_all_chains_add_vertex;;
	*);;*/

	//Оператор return
	-> ..proc_find_all_chains_return (*
		<- return;;
	*);;
		
	*);;
*);;
